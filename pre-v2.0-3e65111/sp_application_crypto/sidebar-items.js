initSidebarItems({"macro":[["app_crypto","Declares Public, Pair, Signature types which are functionally equivalent to `$pair`, but are new  Application-specific types whose identifier is `$key_type`."],["app_crypto_pair","Declares Pair type which is functionally equivalent to `$pair`, but is new Application-specific type whose identifier is `$key_type`."],["app_crypto_public_common","Declares Public type which is functionally equivalent to `$public`, but is new Application-specific type whose identifier is `$key_type`. For full functionality, app_crypto_public_(not)_full_crypto! must be called too."],["app_crypto_public_full_crypto","Declares Public type which is functionally equivalent to `$public`, but is new Application-specific type whose identifier is `$key_type`. can only be used together with `full_crypto` feature For full functionality, app_crypto_public_common! must be called too."],["app_crypto_public_not_full_crypto","Declares Public type which is functionally equivalent to `$public`, but is new Application-specific type whose identifier is `$key_type`. can only be used without `full_crypto` feature For full functionality, app_crypto_public_common! must be called too."],["app_crypto_signature_common","Declares Signature type which is functionally equivalent to `$sig`, but is new Application-specific type whose identifier is `$key_type`. For full functionality, app_crypto_public_(not)_full_crypto! must be called too."],["app_crypto_signature_full_crypto","Declares Signature type which is functionally equivalent to `$sig`, but is new Application-specific type whose identifier is `$key_type`. can only be used together with `full_crypto` feature For full functionality, app_crypto_public_common! must be called too."],["app_crypto_signature_not_full_crypto","Declares Signature type which is functionally equivalent to `$sig`, but is new Application-specific type whose identifier is `$key_type`. can only be used without `full_crypto` feature For full functionality, app_crypto_public_common! must be called too."],["wrap","Implement bidirectional `From` and on-way `AsRef`/`AsMut` for two types, `$inner` and `$outer`."]],"mod":[["ed25519","Ed25519 crypto types."],["key_types","Known key types; this also functions as a global registry of key types for projects wishing to avoid collisions with each other."],["sr25519","Sr25519 crypto types."]],"struct":[["KeyTypeId","An identifier for a type of cryptographic key."]],"trait":[["AppKey","An application-specific key."],["AppPair","A application's key pair."],["AppPublic","A application's public key."],["AppSignature","A application's signature."],["BoundToRuntimeAppPublic","Something that bound to a fixed `RuntimeAppPublic`."],["MaybeHash","Type which implements Hash in std, not when no-std (std variant)."],["RuntimeAppPublic","A runtime interface for an application's public key."],["RuntimePublic","A runtime interface for a public key."]]});