initSidebarItems({"fn":[["call_in_wasm","Call the given `function` in the given wasm `code`."],["with_native_environment","Set up the externalities and safe calling environment to execute calls to a native runtime."]],"macro":[["convert_args","Converts arguments into respective WASM types."],["gen_signature","Generates a WASM signature for given list of parameters."],["impl_wasm_host_interface","Implements the wasm host interface for the given type."],["marshall","Pass the list of parameters by converting them to respective WASM types."],["native_executor_instance","Implements a `NativeExecutionDispatch` for provided parameters."],["unmarshall_args","Converts the list of arguments coming from WASM into their native types."]],"mod":[["allocator","This module implements a freeing-bump allocator."],["deprecated_host_interface","Definition and implementation of the old and deprecated Substrate runtime interface for the host."],["error","Rust executor possible errors."],["sandbox","This module implements sandboxing support in the runtime."],["sp_wasm_interface","Types and traits for interfacing between the host and the wasm runtime."],["wasmi","wasmi"]],"struct":[["NativeVersion",""],["RuntimeVersion","Runtime version. This should not be thought of as classic Semver (major/minor/tiny). This triplet have different semantics and mis-interpretation could cause problems. In particular: bug fixes should result in an increment of `spec_version` and possibly `authoring_version`, absolutely not `impl_version` since they change the semantics of the runtime."]],"trait":[["Codec","Trait that allows zero-copy read/write of value-references to/from slices in LE format."],["Externalities","The Substrate externalities."],["NativeExecutionDispatch","Delegate for dispatching a CodeExecutor call."],["RuntimeInfo","Provides runtime information."]]});