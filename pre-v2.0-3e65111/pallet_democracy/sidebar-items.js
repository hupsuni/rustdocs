initSidebarItems({"enum":[["Call","Dispatchable calls."],["Conviction","A value denoting the strength of conviction of a vote."],["Error",""],["RawEvent","Events for this module."],["VoteThreshold","A means of determining if a vote is past pass threshold."]],"struct":[["Blacklist","A record of who vetoed what. Maps proposal hash to a possible existent block number (until when it may not be resubmitted) and who vetoed it."],["Cancellations","Record of all proposals that have been subject to emergency cancellation."],["Delegations","Get the account (and lock periods) to which another account is delegating vote."],["DepositOf","Those who have locked a deposit."],["DispatchQueue","Queue of successful referenda to be dispatched. Stored ordered by block number."],["GenesisConfig",""],["LastTabledWasExternal","True if the last referendum tabled was submitted externally. False if it was a public proposal."],["LowestUnbaked","The lowest referendum index representing an unbaked referendum. Equal to `ReferendumCount` if there isn't a unbaked referendum."],["Module",""],["NextExternal","The referendum to be tabled whenever it would be valid to table an external proposal. This happens when a referendum needs to be tabled and one of two conditions are met: - `LastTabledWasExternal` is `false`; or - `PublicProps` is empty."],["Preimages","Map of hashes to the proposal preimage, along with who registered it and their deposit. The block number is the block at which it was deposited."],["Proxy","Who is able to vote for whom. Value is the fund-holding account, key is the vote-transaction-sending account."],["PublicPropCount","The number of (public) proposals that have been made so far."],["PublicProps","The public proposals. Unsorted. The second item is the proposal's hash."],["ReferendumCount","The next free referendum index, aka the number of referenda started so far."],["ReferendumInfo","Info regarding an ongoing referendum."],["ReferendumInfoOf","Information concerning any given referendum."],["Vote","A number of lock periods, plus a vote, one way or the other."],["VoteOf","Get the vote in a given referendum of a particular voter. The result is meaningful only if `voters_for` includes the voter when called with the referendum (you'll get the default `Vote` value otherwise). If you don't want to check `voters_for`, then you can also check for simple existence with `VoteOf::exists` first."],["VotersFor","Get the voters for the current proposal."]],"trait":[["Approved",""],["Trait",""]],"type":[["Event","[`RawEvent`] specialized for the configuration [`Trait`]"],["PropIndex","A proposal index."],["ReferendumIndex","A referendum index."]]});