(function() {var implementors = {};
implementors["libp2p_floodsub"] = [{text:"impl&lt;TSubstream&gt; <a class=\"trait\" href=\"libp2p_swarm/behaviour/trait.NetworkBehaviour.html\" title=\"trait libp2p_swarm::behaviour::NetworkBehaviour\">NetworkBehaviour</a> for <a class=\"struct\" href=\"libp2p_floodsub/struct.Floodsub.html\" title=\"struct libp2p_floodsub::Floodsub\">Floodsub</a>&lt;TSubstream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSubstream: <a class=\"trait\" href=\"tokio_io/async_read/trait.AsyncRead.html\" title=\"trait tokio_io::async_read::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"tokio_io/async_write/trait.AsyncWrite.html\" title=\"trait tokio_io::async_write::AsyncWrite\">AsyncWrite</a>,&nbsp;</span>",synthetic:false,types:["libp2p_floodsub::layer::Floodsub"]},];
implementors["libp2p_identify"] = [{text:"impl&lt;TSubstream&gt; <a class=\"trait\" href=\"libp2p_swarm/behaviour/trait.NetworkBehaviour.html\" title=\"trait libp2p_swarm::behaviour::NetworkBehaviour\">NetworkBehaviour</a> for <a class=\"struct\" href=\"libp2p_identify/struct.Identify.html\" title=\"struct libp2p_identify::Identify\">Identify</a>&lt;TSubstream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSubstream: <a class=\"trait\" href=\"tokio_io/async_read/trait.AsyncRead.html\" title=\"trait tokio_io::async_read::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"tokio_io/async_write/trait.AsyncWrite.html\" title=\"trait tokio_io::async_write::AsyncWrite\">AsyncWrite</a>,&nbsp;</span>",synthetic:false,types:["libp2p_identify::identify::Identify"]},];
implementors["libp2p_kad"] = [{text:"impl&lt;TSubstream, TStore&gt; <a class=\"trait\" href=\"libp2p_swarm/behaviour/trait.NetworkBehaviour.html\" title=\"trait libp2p_swarm::behaviour::NetworkBehaviour\">NetworkBehaviour</a> for <a class=\"struct\" href=\"libp2p_kad/struct.Kademlia.html\" title=\"struct libp2p_kad::Kademlia\">Kademlia</a>&lt;TSubstream, TStore&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSubstream: <a class=\"trait\" href=\"tokio_io/async_read/trait.AsyncRead.html\" title=\"trait tokio_io::async_read::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"tokio_io/async_write/trait.AsyncWrite.html\" title=\"trait tokio_io::async_write::AsyncWrite\">AsyncWrite</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;TStore: <a class=\"trait\" href=\"libp2p_kad/record/store/trait.RecordStore.html\" title=\"trait libp2p_kad::record::store::RecordStore\">RecordStore</a>&lt;'a&gt;,&nbsp;</span>",synthetic:false,types:["libp2p_kad::behaviour::Kademlia"]},];
implementors["libp2p_mdns"] = [{text:"impl&lt;TSubstream&gt; <a class=\"trait\" href=\"libp2p_swarm/behaviour/trait.NetworkBehaviour.html\" title=\"trait libp2p_swarm::behaviour::NetworkBehaviour\">NetworkBehaviour</a> for <a class=\"struct\" href=\"libp2p_mdns/struct.Mdns.html\" title=\"struct libp2p_mdns::Mdns\">Mdns</a>&lt;TSubstream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSubstream: <a class=\"trait\" href=\"tokio_io/async_read/trait.AsyncRead.html\" title=\"trait tokio_io::async_read::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"tokio_io/async_write/trait.AsyncWrite.html\" title=\"trait tokio_io::async_write::AsyncWrite\">AsyncWrite</a>,&nbsp;</span>",synthetic:false,types:["libp2p_mdns::behaviour::Mdns"]},];
implementors["libp2p_ping"] = [{text:"impl&lt;TSubstream&gt; <a class=\"trait\" href=\"libp2p_swarm/behaviour/trait.NetworkBehaviour.html\" title=\"trait libp2p_swarm::behaviour::NetworkBehaviour\">NetworkBehaviour</a> for <a class=\"struct\" href=\"libp2p_ping/struct.Ping.html\" title=\"struct libp2p_ping::Ping\">Ping</a>&lt;TSubstream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSubstream: <a class=\"trait\" href=\"tokio_io/async_read/trait.AsyncRead.html\" title=\"trait tokio_io::async_read::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"tokio_io/async_write/trait.AsyncWrite.html\" title=\"trait tokio_io::async_write::AsyncWrite\">AsyncWrite</a>,&nbsp;</span>",synthetic:false,types:["libp2p_ping::Ping"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        })()