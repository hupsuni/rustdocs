initSidebarItems({"enum":[["DhtEvent","Events generated by DHT as a response to get_value and put_value requests."],["Event","Type for events generated by networking layer."],["NetworkStatePeerEndpoint","Part of the `NetworkState` struct. Unstable."],["SyncState","Reported sync state."]],"macro":[["construct_simple_protocol","Construct a simple protocol that is composed of several sub protocols. Each \"sub protocol\" needs to implement `Specialization` and needs to provide a `new()` function. For more fine grained implementations, this macro is not usable."]],"mod":[["config","Configuration of the networking layer."],["error","Substrate network possible errors."],["generic_message","Generic types."],["message","Network packet message types. These get serialized and put into the lower level protocol payload."],["multiaddr",""],["specialization","Specializations of the substrate network protocol to allow more complex forms of communication."]],"struct":[["Multiaddr","Representation of a Multiaddr."],["NetworkService","Substrate network service. Handles network IO and manages connectivity."],["NetworkState","Returns general information about the networking."],["NetworkStateNotConnectedPeer","Part of the `NetworkState` struct. Unstable."],["NetworkStatePeer","Part of the `NetworkState` struct. Unstable."],["NetworkWorker","Main network worker. Must be polled in order for the network to advance."],["OnDemand","Implements the `Fetcher` trait of the client. Makes it possible for the light client to perform network requests for some state."],["PeerId","Identifier of a peer of the network."],["PeerInfo","Info about a peer's known state."],["ProtocolConfig","Configuration for the Substrate-specific part of the networking layer."],["RemoteResponse","Future for an on-demand remote call response."],["ReportHandle","A cloneable handle for reporting cost/benefits of peers."],["ReputationChange","Shared handle to the peer set manager (PSM). Distributed around the code."]],"trait":[["ClientHandle","Local client abstraction for the network."],["Context","Context for a network-specific handler."],["DiscoveryNetBehaviour","Extension trait for `NetworkBehaviour` that also accepts discovering nodes."],["ExHashT","Minimum Requirements for a Hash within Networking"],["FinalityProofProvider","Finality proof provider."],["NetworkStateInfo","Trait for providing information about the local network state"],["TransactionPool","Transaction pool interface"]],"type":[["RequestId","A unique ID of a request."],["StatusMessage","Type alias for using the status type using block type parameters."]]});