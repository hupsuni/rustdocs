initSidebarItems({"constant":[["DEFAULT_EXECUTION_BLOCK_CONSTRUCTION","Default value for the `--execution-block-construction` parameter."],["DEFAULT_EXECUTION_IMPORT_BLOCK","Default value for the `--execution-import-block` parameter."],["DEFAULT_EXECUTION_OFFCHAIN_WORKER","Default value for the `--execution-offchain-worker` parameter."],["DEFAULT_EXECUTION_OTHER","Default value for the `--execution-other` parameter."],["DEFAULT_EXECUTION_SYNCING","Default value for the `--execution-syncing` parameter."]],"enum":[["Error","Error type for the CLI."],["ExecutionStrategy","How to execute blocks"],["NodeKeyType",""],["Subcommand","All core commands that are provided by default."],["TracingReceiver",""],["WasmExecutionMethod","How to execute Wasm runtime code"]],"fn":[["from_args","Helper function used to parse the command line arguments. This is the equivalent of `structopt`'s `from_iter()` except that it takes a `VersionInfo` argument to provide the name of the application, author, \"about\" and version. It will also set `AppSettings::GlobalVersion`."],["from_iter","Helper function used to parse the command line arguments. This is the equivalent of `structopt`'s `from_iter()` except that it takes a `VersionInfo` argument to provide the name of the application, author, \"about\" and version. It will also set `AppSettings::GlobalVersion`."],["init","Initialize substrate. This must be done only once."],["init_logger","Initialize the logger"],["run_service_until_exit","A helper function that runs an `AbstractService` with tokio and stops if the process receives the signal SIGTERM or SIGINT"],["run_until_exit","A helper function that runs a future with tokio and stops if the process receives the signal SIGTERM or SIGINT"],["try_from_iter","Helper function used to parse the command line arguments. This is the equivalent of `structopt`'s `from_iter()` except that it takes a `VersionInfo` argument to provide the name of the application, author, \"about\" and version. It will also set `AppSettings::GlobalVersion`."]],"struct":[["BlockNumber","Wrapper type of `String` that holds an unsigned integer of arbitrary size, formatted as a decimal."],["BuildSpecCmd","The `build-spec` command used to build a specification."],["CheckBlockCmd","The `check-block` command used to validate blocks."],["ExecutionStrategies","Execution strategies parameters."],["ExportBlocksCmd","The `export-blocks` command used to export blocks."],["ImportBlocksCmd","The `import-blocks` command used to import blocks."],["ImportParams","Parameters for block import."],["NetworkConfigurationParams","Parameters used to create the network configuration."],["NodeKeyParams","Parameters used to create the `NodeKeyConfig`, which determines the keypair used for libp2p networking."],["PruningParams","Parameters to define the pruning mode"],["PurgeChainCmd","The `purge-chain` command used to remove the whole chain."],["RevertCmd","The `revert` command used revert the chain to a previous state."],["RunCmd","The `run` command used to run a node."],["SharedParams","Shared parameters used by all `CoreParams`."],["TransactionPoolParams","Parameters used to create the pool configuration."],["VersionInfo","Executable version. Used to pass version information from the root crate."]],"type":[["Result","Result type alias for the CLI."]]});