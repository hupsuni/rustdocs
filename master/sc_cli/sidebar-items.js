initSidebarItems({"enum":[["ExecutionStrategy","How to execute blocks"],["Subcommand","All core commands that are provided by default."],["WasmExecutionMethod","How to execute Wasm runtime code"]],"fn":[["display_role","Returns a string displaying the node role, special casing the sentry mode (returning `SENTRY`), since the node technically has an `AUTHORITY` role but doesn't participate."],["fill_config_keystore_in_memory","Use in memory keystore config when it is not required at all."],["fill_import_params","Put block import CLI params into `config` object."],["from_args","Helper function used to parse the command line arguments. This is the equivalent of `structopt`'s `from_args()` except that it takes a `VersionInfo` argument to provide the name of the application, author, \"about\" and version."],["from_iter","Helper function used to parse the command line arguments. This is the equivalent of `structopt`'s `from_iter()` except that it takes a `VersionInfo` argument to provide the name of the application, author, \"about\" and version."],["init","Initialize substrate. This must be done only once."],["init_config","Initialize the given `config`."],["init_logger","Initialize the logger"],["load_spec","Load spec to `Configuration` from shared params and spec factory."],["run","A helper function that initializes and runs the node"],["run_node","Run the node"],["run_service_until_exit","A helper function that runs an `AbstractService` with tokio and stops if the process receives the signal SIGTERM or SIGINT"],["run_subcommand","A helper function that initializes and runs any of the subcommand variants of `CoreParams`."],["run_until_exit","A helper function that runs a future with tokio and stops if the process receives the signal SIGTERM or SIGINT"],["try_from_iter","Helper function used to parse the command line arguments. This is the equivalent of `structopt`'s `try_from_iter()` except that it takes a `VersionInfo` argument to provide the name of the application, author, \"about\" and version."],["update_config_for_running_node","Update and prepare a `Configuration` with command line parameters of `RunCmd` and `VersionInfo`"]],"mod":[["error","Initialization errors."]],"struct":[["BuildSpecCmd","The `build-spec` command used to build a specification."],["CheckBlockCmd","The `check-block` command used to validate blocks."],["ExportBlocksCmd","The `export-blocks` command used to export blocks."],["ImportBlocksCmd","The `import-blocks` command used to import blocks."],["ImportParams","Parameters for block import."],["PurgeChainCmd","The `purge-chain` command used to remove the whole chain."],["RevertCmd","The `revert` command used revert the chain to a previous state."],["RunCmd","The `run` command used to run a node."],["SharedParams","Shared parameters used by all `CoreParams`."],["VersionInfo","Executable version. Used to pass version information from the root crate."]],"trait":[["GetSharedParams","Supports getting common params."]]});