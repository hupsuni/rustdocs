initSidebarItems({"enum":[["BalanceStatus","Status of funds."],["ExistenceRequirement","Simple boolean for whether an account needs to be kept in existence."],["SignedImbalance","Either a positive or a negative imbalance."],["WithdrawReason","Reason for moving funds out of an account."]],"struct":[["CallMetadata","The function and pallet name of the Call."],["SplitTwoWays","Split an unbalanced amount two ways between a common divisor."],["StorageMapShim","A shim for placing around a storage item in order to use it as a `StoredValue`. Ideally this wouldn't be needed as `StorageValue`s should blanket implement `StoredValue`s, however this would break the ability to have custom impls of `StoredValue`. The other workaround is to implement it directly in the macro."],["WithdrawReasons","Reasons for moving funds out of an account."]],"trait":[["ChangeMembers","Trait for type that can handle incremental changes to a set of account IDs."],["Contains","A trait for querying whether a type can be said to statically \"contain\" a value. Similar in nature to `Get`, except it is designed to be lazy rather than active (you can't ask it to enumerate all values that it contains) and work for multiple values rather than just one."],["Currency","Abstraction over a fungible assets system."],["FindAuthor","A trait for finding the author of a block header based on the `PreRuntime` digests contained within it."],["Get","A trait for querying a single fixed value from a type."],["GetCallMetadata","Gets the metadata for the Call - function name and pallet name."],["GetCallName","Gets the function name of the Call."],["Happened","A simple, generic one-parameter event notifier/handler."],["Imbalance","A trait for a not-quite Linear Type that tracks an imbalance."],["InitializeMembers","Trait for type that can handle the initialization of account IDs at genesis."],["IsDeadAccount","Determiner to say whether a given account is unused."],["KeyOwnerProofSystem","Something which can compute and check proofs of a historical key owner and return full identification data of that key owner."],["Len","Anything that can have a `::len()` method."],["LockableCurrency","A currency whose accounts can have liquidity restrictions."],["ModuleToIndex","Something that can convert a given module into the index of the module in the runtime."],["OnNewAccount","Handler for when a new account has been created."],["OnReapAccount","The account with the given id was reaped."],["OnUnbalanced","Handler for when some currency \"account\" decreased in balance for some reason."],["Randomness",""],["ReservableCurrency","A currency where funds can be reserved from the user."],["StoredMap","An abstraction of a value stored within storage, but possibly as part of a larger composite item."],["Time",""],["TryDrop","A type for which some values make sense to be able to drop without further consideration."],["ValidatorRegistration","Implementors of this trait provide information about whether or not some validator has been registered with them. The Session module is an implementor."],["VerifySeal","A trait for verifying the seal of a header and returning the author."],["VestingSchedule","A vesting schedule over a currency. This allows a particular currency to have vesting limits applied to it."]],"type":[["LockIdentifier","An identifier for a lock. Used for disambiguating different locks so that they can be individually replaced or removed."]]});