initSidebarItems({"enum":[["KeepAlive","How long the connection should be kept alive."],["NetworkBehaviourAction","An action that a [`NetworkBehaviour`] can trigger in the [`Swarm`] in whose context it is executing."],["ProtocolsHandlerEvent","Event produced by a handler."],["ProtocolsHandlerUpgrErr","Error that can happen on an outbound substream opening attempt."],["SwarmEvent","Event generated by the `Swarm`."]],"mod":[["protocols_handler","Once a connection to a remote peer is established, a `ProtocolsHandler` negotiates and handles one or more specific protocols on the connection."],["toggle",""]],"struct":[["DummyBehaviour","Dummy implementation of [`NetworkBehaviour`] that doesn't do anything."],["ExpandedSwarm","Contains the state of the network, plus the way it should behave."],["IntoProtocolsHandlerSelect","Implementation of `IntoProtocolsHandler` that combines two protocols into one."],["OneShotHandler","Implementation of `ProtocolsHandler` that opens a new substream for each individual message."],["ProtocolsHandlerSelect","Implementation of `ProtocolsHandler` that combines two protocols into one."],["SubstreamProtocol","Configuration of inbound or outbound substream protocol(s) for a [`ProtocolsHandler`]."],["SwarmBuilder",""],["SwarmPollParameters","Parameters passed to `poll()`, that the `NetworkBehaviour` has access to."]],"trait":[["IntoProtocolsHandler","Prototype for a `ProtocolsHandler`."],["NetworkBehaviour","A behaviour for the network. Allows customizing the swarm."],["NetworkBehaviourEventProcess","When deriving [`NetworkBehaviour`] this trait must be implemented for all the possible event types generated by the inner behaviours."],["PollParameters","Parameters passed to `poll()`, that the `NetworkBehaviour` has access to."],["ProtocolsHandler","A handler for a set of protocols used on a connection with a remote."]],"type":[["NegotiatedSubstream","Substream for which a protocol has been chosen."],["Swarm","Contains the state of the network, plus the way it should behave."]]});