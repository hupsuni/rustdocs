initSidebarItems({"enum":[["ExecutionStrategy","Strategy for executing a call into the runtime."]],"fn":[["apply_aux","Helper function to apply auxiliary data insertion into an operation."],["new_in_mem","Create an instance of in-memory client."],["new_with_backend","Create a client with the explicitly provided backend. This is useful for testing backend implementations."]],"mod":[["cht","Canonical hash trie definitions and helper functions."],["genesis","Tool for creating the genesis block."],["in_mem","In memory client backend"],["leaves","Helper for managing the set of available leaves in the chain for DB implementations."],["light","Light client components."],["utils","Utility methods for the client."],["well_known_cache_keys","A list of all well known keys in the blockchain cache."]],"struct":[["BlockImportNotification","Summary of an imported block"],["ChainInfo","Blockchain info"],["Client","Substrate Client"],["ClientInfo","Client info"],["ExecutionStrategies","Execution strategies settings."],["FinalityNotification","Summary of a finalized block."],["LocalCallExecutor","Call executor that executes methods locally, querying all required data from local backend."],["LongestChain","Implement Longest Chain Select implementation where 'longest' is defined as the highest number of blocks"],["StateMachine","The substrate state machine."],["StorageChangeSet","Storage change set"],["StorageProof","A proof that some set of key-value pairs are included in the storage trie. The proof contains the storage values so that the partial storage backend can be reconstructed by a verifier that does not already have access to the key-value pairs."]],"trait":[["BlockBody","Fetch block body by ID."],["BlockOf","Figure out the block type for a given type (for now, just a `Client`)."],["BlockchainEvents","A source of blockchain events."],["CallExecutor","Method call executor."],["ProvideUncles","Provide a list of potential uncle headers for a given block."]],"type":[["BadBlocks","Known bad block hashes."],["FinalityNotifications","A stream of block finality notifications."],["ForkBlocks","Expected hashes of blocks at given heights."],["ImportNotifications","Type that implements `futures::Stream` of block import events."],["StorageEventStream","Type that implements `futures::Stream` of storage change events."]]});