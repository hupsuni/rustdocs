(function() {var implementors = {};
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Sink&lt;T&gt; for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sink&lt;T&gt; for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Sink&lt;T&gt; for &amp;'_ UnboundedSender&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_codec"] = [{"text":"impl&lt;T, U&gt; Sink&lt;&lt;U as Encoder&gt;::Item&gt; for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Encoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, E&gt; Sink&lt;&lt;E as Encoder&gt;::Item&gt; for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encoder,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["futures_sink"] = [];
implementors["libp2p_core"] = [{"text":"impl&lt;A, B, I&gt; Sink&lt;I&gt; for EitherOutput&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sink&lt;I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sink&lt;I&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sink&lt;T&gt; for Chan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl&lt;S&gt; Sink&lt;BytesMut&gt; for PlainTextMiddleware&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_secio"] = [{"text":"impl&lt;S&gt; <a class=\"trait\" href=\"futures_sink/trait.Sink.html\" title=\"trait futures_sink::Sink\">Sink</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt; for <a class=\"struct\" href=\"libp2p_secio/struct.SecioMiddleware.html\" title=\"struct libp2p_secio::SecioMiddleware\">SecioMiddleware</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,&nbsp;</span>","synthetic":false,"types":["libp2p_secio::SecioMiddleware"]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T&gt; Sink&lt;OutgoingData&gt; for Connection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sink&lt;Vec&lt;u8&gt;&gt; for BytesConnection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["quicksink"] = [{"text":"impl&lt;S, F, T, A, E&gt; Sink&lt;A&gt; for SinkImpl&lt;S, F, T, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(S, Action&lt;A&gt;) -&gt; T,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Future&lt;Output = Result&lt;S, E&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sp_utils"] = [{"text":"impl&lt;T&gt; Sink&lt;T&gt; for TracingUnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Sink&lt;T&gt; for &amp;'_ TracingUnboundedSender&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl&lt;T, I, U&gt; Sink&lt;I&gt; for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Encoder&lt;I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Error: From&lt;Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, I, D&gt; Sink&lt;I&gt; for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sink&lt;I&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, I, E&gt; Sink&lt;I&gt; for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncWrite,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Encoder&lt;I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E::Error: From&lt;Error&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()