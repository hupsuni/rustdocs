(function() {var implementors = {};
implementors["pallet_atomic_swap"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; StorageDoubleMap&lt;&lt;T as Trait&gt;::AccountId, [u8; 32], PendingSwap&lt;T&gt;&gt; for PendingSwaps&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_generic_asset"] = [{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"pallet_generic_asset/trait.Trait.html\" title=\"trait pallet_generic_asset::Trait\">Trait</a>&gt; StorageDoubleMap&lt;&lt;T as <a class=\"trait\" href=\"pallet_generic_asset/trait.Trait.html\" title=\"trait pallet_generic_asset::Trait\">Trait</a>&gt;::<a class=\"type\" href=\"pallet_generic_asset/trait.Trait.html#associatedtype.AssetId\" title=\"type pallet_generic_asset::Trait::AssetId\">AssetId</a>, &lt;T as <a class=\"trait\" href=\"frame_system/trait.Trait.html\" title=\"trait frame_system::Trait\">Trait</a>&gt;::<a class=\"type\" href=\"frame_system/trait.Trait.html#associatedtype.AccountId\" title=\"type frame_system::Trait::AccountId\">AccountId</a>, &lt;T as <a class=\"trait\" href=\"pallet_generic_asset/trait.Trait.html\" title=\"trait pallet_generic_asset::Trait\">Trait</a>&gt;::<a class=\"type\" href=\"pallet_generic_asset/trait.Trait.html#associatedtype.Balance\" title=\"type pallet_generic_asset::Trait::Balance\">Balance</a>&gt; for <a class=\"struct\" href=\"pallet_generic_asset/struct.FreeBalance.html\" title=\"struct pallet_generic_asset::FreeBalance\">FreeBalance</a>&lt;T&gt;","synthetic":false,"types":["pallet_generic_asset::FreeBalance"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"pallet_generic_asset/trait.Trait.html\" title=\"trait pallet_generic_asset::Trait\">Trait</a>&gt; StorageDoubleMap&lt;&lt;T as <a class=\"trait\" href=\"pallet_generic_asset/trait.Trait.html\" title=\"trait pallet_generic_asset::Trait\">Trait</a>&gt;::<a class=\"type\" href=\"pallet_generic_asset/trait.Trait.html#associatedtype.AssetId\" title=\"type pallet_generic_asset::Trait::AssetId\">AssetId</a>, &lt;T as <a class=\"trait\" href=\"frame_system/trait.Trait.html\" title=\"trait frame_system::Trait\">Trait</a>&gt;::<a class=\"type\" href=\"frame_system/trait.Trait.html#associatedtype.AccountId\" title=\"type frame_system::Trait::AccountId\">AccountId</a>, &lt;T as <a class=\"trait\" href=\"pallet_generic_asset/trait.Trait.html\" title=\"trait pallet_generic_asset::Trait\">Trait</a>&gt;::<a class=\"type\" href=\"pallet_generic_asset/trait.Trait.html#associatedtype.Balance\" title=\"type pallet_generic_asset::Trait::Balance\">Balance</a>&gt; for <a class=\"struct\" href=\"pallet_generic_asset/struct.ReservedBalance.html\" title=\"struct pallet_generic_asset::ReservedBalance\">ReservedBalance</a>&lt;T&gt;","synthetic":false,"types":["pallet_generic_asset::ReservedBalance"]}];
implementors["pallet_multisig"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; StorageDoubleMap&lt;&lt;T as Trait&gt;::AccountId, [u8; 32], Multisig&lt;&lt;T as Trait&gt;::BlockNumber, &lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance, &lt;T as Trait&gt;::AccountId&gt;&gt; for Multisigs&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_recovery"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; StorageDoubleMap&lt;&lt;T as Trait&gt;::AccountId, &lt;T as Trait&gt;::AccountId, ActiveRecovery&lt;&lt;T as Trait&gt;::BlockNumber, &lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance, &lt;T as Trait&gt;::AccountId&gt;&gt; for ActiveRecoveries&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pallet_staking"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; StorageDoubleMap&lt;u32, &lt;T as Trait&gt;::AccountId, Exposure&lt;&lt;T as Trait&gt;::AccountId, &lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for ErasStakers&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; StorageDoubleMap&lt;u32, &lt;T as Trait&gt;::AccountId, Exposure&lt;&lt;T as Trait&gt;::AccountId, &lt;&lt;T as Trait&gt;::Currency as Currency&lt;&lt;T as Trait&gt;::AccountId&gt;&gt;::Balance&gt;&gt; for ErasStakersClipped&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; StorageDoubleMap&lt;u32, &lt;T as Trait&gt;::AccountId, ValidatorPrefs&gt; for ErasValidatorPrefs&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()