(function() {var implementors = {};
implementors["async_channel"] = [{"text":"impl&lt;T&gt; Stream for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["blocking"] = [{"text":"impl&lt;T:&nbsp;Iterator + Send + 'static&gt; Stream for Unblock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Item: Send + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Stream for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for UnboundedReceiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_codec"] = [{"text":"impl&lt;T, U&gt; Stream for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Decoder,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["futures_core"] = [];
implementors["futures_lite"] = [{"text":"impl&lt;R:&nbsp;AsyncBufRead&gt; Stream for Lines&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncBufRead&gt; Stream for Split&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsyncRead + Unpin&gt; Stream for Bytes&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Iterator&gt; Stream for Iter&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for Once&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Stream for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;Option&lt;T&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Stream for Repeat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Stream for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut() -&gt; T,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F, Fut, Item&gt; Stream for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Option&lt;(Item, T)&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, E, F, Fut, Item&gt; Stream for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T) -&gt; Fut,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future&lt;Output = Result&lt;Option&lt;(Item, T)&gt;, E&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["gloo_timers"] = [{"text":"impl Stream for IntervalStream","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Stream for Body","synthetic":false,"types":[]}];
implementors["intervalier"] = [{"text":"impl Stream for ManualSignalInterval","synthetic":false,"types":[]}];
implementors["libp2p"] = [{"text":"impl&lt;TInner, TConn, TErr&gt; Stream for BandwidthListener&lt;TInner&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TInner: TryStream&lt;Ok = ListenerEvent&lt;TConn, TErr&gt;, Error = TErr&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_core"] = [{"text":"impl&lt;TTrans&gt; Stream for ListenersStream&lt;TTrans&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TTrans: Transport,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B, I&gt; Stream for EitherOutput&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: TryStream&lt;Ok = I&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: TryStream&lt;Ok = I&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;AStream, BStream, AInner, BInner, AError, BError&gt; Stream for EitherListenStream&lt;AStream, BStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AStream: TryStream&lt;Ok = ListenerEvent&lt;AInner, AError&gt;, Error = AError&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;BStream: TryStream&lt;Ok = ListenerEvent&lt;BInner, BError&gt;, Error = BError&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;TListener, TMap, TTransOut, TMapOut, TListUpgr, TTransErr&gt; Stream for AndThenStream&lt;TListener, TMap&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TListener: TryStream&lt;Ok = ListenerEvent&lt;TListUpgr, TTransErr&gt;, Error = TTransErr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TListUpgr: TryFuture&lt;Ok = TTransOut, Error = TTransErr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMap: FnOnce(TTransOut, ConnectedPoint) -&gt; TMapOut + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;TMapOut: TryFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F, A, B, X, E&gt; Stream for MapStream&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: TryStream&lt;Ok = ListenerEvent&lt;X, E&gt;, Error = E&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: TryFuture&lt;Ok = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(A, ConnectedPoint) -&gt; B + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F, TErr&gt; Stream for MapErrListener&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Transport,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T::Error) -&gt; TErr + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;TErr: Error,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Stream for Listener","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for Chan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;InnerStream, O, E&gt; Stream for TimeoutListener&lt;InnerStream&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InnerStream: TryStream&lt;Ok = ListenerEvent&lt;O, E&gt;, Error = E&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, U, F, I, C, D, E&gt; Stream for ListenerStream&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: TryStream&lt;Ok = ListenerEvent&lt;F, E&gt;, Error = E&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: TryFuture&lt;Ok = (I, C)&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: InboundUpgrade&lt;Negotiated&lt;C&gt;, Output = D&gt; + Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_plaintext"] = [{"text":"impl&lt;S&gt; Stream for PlainTextMiddleware&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsyncRead + AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_secio"] = [{"text":"impl&lt;S&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"libp2p_secio/struct.SecioMiddleware.html\" title=\"struct libp2p_secio::SecioMiddleware\">SecioMiddleware</a>&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,&nbsp;</span>","synthetic":false,"types":["libp2p_secio::SecioMiddleware"]}];
implementors["libp2p_swarm"] = [{"text":"impl&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt; Stream for ExpandedSwarm&lt;TBehaviour, TInEvent, TOutEvent, THandler, TConnInfo&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TBehaviour: NetworkBehaviour&lt;ProtocolsHandler = THandler&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler: IntoProtocolsHandler + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;TInEvent: Clone + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;TOutEvent: Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;THandler::Handler: ProtocolsHandler&lt;InEvent = TInEvent, OutEvent = TOutEvent&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;TConnInfo: ConnectionInfo&lt;PeerId = PeerId&gt; + Debug + Clone + Send + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_wasm_ext"] = [{"text":"impl Stream for Listen","synthetic":false,"types":[]}];
implementors["libp2p_websocket"] = [{"text":"impl&lt;T&gt; Stream for Connection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for BytesConnection&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Send + Unpin + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["libp2p_yamux"] = [{"text":"impl&lt;T&gt; Stream for Incoming&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for LocalIncoming&lt;T&gt;","synthetic":false,"types":[]}];
implementors["sc_peerset"] = [{"text":"impl Stream for Peerset","synthetic":false,"types":[]}];
implementors["sc_telemetry"] = [{"text":"impl Stream for Telemetry","synthetic":false,"types":[]}];
implementors["sp_utils"] = [{"text":"impl&lt;T&gt; Stream for TracingUnboundedReceiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl&lt;T, U&gt; Stream for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedWrite&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Stream,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["wasm_timer"] = [{"text":"impl&lt;S&gt; Stream for TimeoutStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: TryStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: From&lt;Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Stream for Interval","synthetic":false,"types":[]}];
implementors["yamux"] = [{"text":"impl Stream for Stream","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()